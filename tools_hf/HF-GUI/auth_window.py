import tkinter as tk
from tkinter import ttk, messagebox
from ldap3 import Server, Connection, ALL, NTLM, SUBTREE
import sys
import pystray
from PIL import Image, ImageDraw
import threading
import os

class AuthWindow:
    def __init__(self, master, on_success_callback):
        self.master = master
        self.on_success = on_success_callback
        self.window = tk.Toplevel(master)
        self.tray_icon = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        self.auth_type = tk.StringVar(value="domain")
        self.auth_frame = None
        
        self._setup_window()
        self._create_widgets()
        self._handle_auth_switcher()
        self._create_tray_icon()

    def _setup_window(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫–Ω–∞"""
        self.window.title("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
        self.window.resizable(False, False)
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∫–æ–Ω–∫–∏
        try:
            if os.path.exists('icon.ico'):
                self.window.iconbitmap(default='icon.ico')
        except Exception:
            pass
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π
        style = ttk.Style()
        style.theme_use('clam')
        style.configure('TFrame', background='#f5f5f5')
        style.configure('TLabel', background='#f5f5f5', font=('Segoe UI', 9))
        style.configure('TButton', font=('Segoe UI', 9))
        style.configure('TEntry', font=('Segoe UI', 9), padding=5)
        style.configure('TRadiobutton', background='#f5f5f5', font=('Segoe UI', 9))
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞
        style.configure('Primary.TButton', 
                       foreground='white', 
                       background='#4285f4',
                       font=('Segoe UI', 10, 'bold'),
                       padding=6)
        style.map('Primary.TButton',
                 background=[('active', '#3367d6'), ('pressed', '#2a56c0')])
        
        # –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞
        height = 220 if self._check_advanced_mode() else 180
        self.window.geometry(f"320x{height}")
        self.window.protocol("WM_DELETE_WINDOW", self.minimize_to_tray)
        self._center_window()

    def _create_tray_icon(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º —Ç—Ä–µ–µ"""
        def create_image():
            image = Image.new('RGB', (64, 64), color='#4285f4')
            draw = ImageDraw.Draw(image)
            draw.text((10, 10), "Auth", fill='white')
            return image
        
        menu = (
            pystray.MenuItem('–û—Ç–∫—Ä—ã—Ç—å', self.restore_from_tray),
            pystray.MenuItem('–í—ã—Ö–æ–¥', self.quit_application)
        )
        
        self.tray_icon = pystray.Icon("auth_app", create_image(), "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", menu)
        threading.Thread(target=self.tray_icon.run, daemon=True).start()

    def _create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        main_frame = ttk.Frame(self.window, padding=(15, 15))
        main_frame.pack(expand=True, fill=tk.BOTH)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ttk.Label(main_frame, 
                 text="üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", 
                 font=('Segoe UI', 12, 'bold'),
                 anchor=tk.CENTER).pack(pady=(0, 15))
        
        # –ü–æ–ª—è –≤–≤–æ–¥–∞
        self._create_input_fields(main_frame)
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ —Ç–∏–ø–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        self._create_auth_switcher(main_frame)
        
        # –ö–Ω–æ–ø–∫–∏
        self._create_action_buttons(main_frame)

    def _create_input_fields(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–µ–π –¥–ª—è –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è"""
        input_frame = ttk.Frame(parent)
        input_frame.pack(fill=tk.X)
        
        # –ü–æ–ª–µ –ª–æ–≥–∏–Ω–∞
        ttk.Label(input_frame, text="–õ–æ–≥–∏–Ω:").pack(anchor=tk.W)
        self.username_entry = ttk.Entry(input_frame, width=14)
        self.username_entry.pack(fill=tk.X, pady=(0, 10))
        
        # –ü–æ–ª–µ –ø–∞—Ä–æ–ª—è
        ttk.Label(input_frame, text="–ü–∞—Ä–æ–ª—å:").pack(anchor=tk.W)
        self.password_entry = ttk.Entry(input_frame, show='‚Ä¢', width=14)
        self.password_entry.pack(fill=tk.X)
        self.password_entry.bind('<Return>', lambda e: self.authenticate())

    def _create_auth_switcher(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π —Ç–∏–ø–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        self.auth_frame = ttk.LabelFrame(parent, 
                                       text="–¢–∏–ø –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", 
                                       padding=(10, 5, 10, 10))
        
        ttk.Radiobutton(
            self.auth_frame,
            text="–õ–æ–∫–∞–ª—å–Ω–∞—è —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å",
            variable=self.auth_type,
            value="local"
        ).pack(anchor=tk.W, pady=2)
        
        ttk.Radiobutton(
            self.auth_frame,
            text="–î–æ–º–µ–Ω–Ω–∞—è —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å",
            variable=self.auth_type,
            value="domain"
        ).pack(anchor=tk.W, pady=2)
        
        self.auth_frame.pack(fill=tk.X, pady=(10, 0))

    def _create_action_buttons(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π"""
        btn_frame = ttk.Frame(parent)
        btn_frame.pack(fill=tk.X, pady=(15, 0))
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞
        login_btn = ttk.Button(
            btn_frame, 
            text="–í–û–ô–¢–ò", 
            command=self.authenticate,
            style='Primary.TButton',
            width=15
        )
        login_btn.pack(side=tk.LEFT, expand=True)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
        ttk.Button(
            btn_frame,
            text="–°–≤–µ—Ä–Ω—É—Ç—å",
            command=self.minimize_to_tray,
            width=10
        ).pack(side=tk.RIGHT)

    def _handle_auth_switcher(self):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç—å—é –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        if self._check_advanced_mode():
            self.auth_frame.pack(fill=tk.X, pady=(10, 0))
            self.window.geometry("320x220")
        else:
            self.auth_frame.pack_forget()
            self.window.geometry("320x180")

    def minimize_to_tray(self):
        """–°–≤–µ—Ä–Ω—É—Ç—å –æ–∫–Ω–æ –≤ —Ç—Ä–µ–π"""
        self.window.withdraw()

    def restore_from_tray(self):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–∫–Ω–æ –∏–∑ —Ç—Ä–µ—è"""
        self.window.deiconify()
        self._center_window()

    def quit_application(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if self.tray_icon:
            self.tray_icon.stop()
        self.window.destroy()
        self.master.quit()

    def _center_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
        self.window.update_idletasks()
        width = self.window.winfo_width()
        height = self.window.winfo_height()
        x = (self.window.winfo_screenwidth() // 2) - (width // 2)
        y = (self.window.winfo_screenheight() // 2) - (height // 2)
        self.window.geometry(f'+{x}+{y}')

    def _check_advanced_mode(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–ª–∞–≥–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        return any(arg.lower() == "--advanced-auth" for arg in sys.argv)

    def authenticate(self):
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        username = self.username_entry.get().strip()
        password = self.password_entry.get()
        is_local = self.auth_type.get() == "local"
        
        if not username or not password:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å")
            return
        
        try:
            if self._check_credentials(username, password, is_local):
                self._on_auth_success(is_local, username)
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")

    def _check_credentials(self, username, password, is_local):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if is_local:
            LOCAL_USERS = {"admin": "root", "user": "usertest"}
            return LOCAL_USERS.get(username) == password
        else:
            try:
                server = Server('ldap://kifr-ru.local', get_info=ALL)
                conn = Connection(server, user=f"KIFR-RU\\{username}", 
                               password=password)
                
                if not conn.bind():
                    return False
                
                return self._check_group_membership(conn, username)
                
            except Exception as e:
                raise Exception(f"LDAP –æ—à–∏–±–∫–∞: {str(e)}")
            finally:
                if 'conn' in locals() and conn.bound:
                    conn.unbind()

    def _check_group_membership(self, conn, username):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –∫ –≥—Ä—É–ø–ø–µ AD"""
        search_base = 'dc=kifr-ru,dc=local'
        search_filter = f'(sAMAccountName={username})'
        attributes = ['distinguishedName']
        
        conn.search(search_base, search_filter, 
                  search_scope=SUBTREE, 
                  attributes=attributes)
        
        if not conn.entries:
            return False
            
        user_dn = conn.entries[0].distinguishedName.value
        group_name = "LSG-GS-KEYCLOAK-OMNI-ALL_GROUPS-ANALYTICS"
        group_filter = f'(&(objectClass=group)(cn={group_name}))'
        
        conn.search(search_base, group_filter, 
                  search_scope=SUBTREE, 
                  attributes=['distinguishedName'])
        
        if not conn.entries:
            return False
            
        group_dn = conn.entries[0].distinguishedName.value
        return self._is_user_in_group(conn, user_dn, group_dn)
    
    def _is_user_in_group(self, conn, user_dn, group_dn, visited=None):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≥—Ä—É–ø–ø–µ"""
        if visited is None:
            visited = set()
        
        group_dn_lower = group_dn.lower()
        if group_dn_lower in visited:
            return False
        visited.add(group_dn_lower)
        
        conn.search(group_dn, '(objectClass=group)', 
                  search_scope=SUBTREE,
                  attributes=['member'])
        
        if not conn.entries:
            return False
        
        for member_dn in conn.entries[0].member.values:
            member_dn_lower = member_dn.lower()
            
            if member_dn_lower == user_dn.lower():
                return True
                
            if 'CN=FS_710_IT-support_omni_l2' in member_dn:
                if self._is_user_in_group(conn, user_dn, member_dn, visited):
                    return True
                    
        return False

    def _on_auth_success(self, is_local, username):
        """–î–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        messagebox.showinfo("–£—Å–ø–µ—à–Ω–æ", "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
        self.on_success(is_admin=True)
        self.window.destroy()
        if self.tray_icon:
            self.tray_icon.stop()
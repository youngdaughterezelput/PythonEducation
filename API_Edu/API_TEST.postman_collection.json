{
	"info": {
		"_postman_id": "9374a88b-78de-4f55-b9d2-81d242d8929d",
		"name": "API_TEST",
		"description": "Тесты из постмана для эндпоинтов. Созданы с целью изучения написания js-тестов и изучения запуска.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "42486344"
	},
	"item": [
		{
			"name": "view user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Проверка статуса",
							"pm.test(\"Status code is 200 OK\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Проверка что ответ - массив",
							"pm.test(\"Response is an array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"});",
							"",
							"// Проверка структуры каждого пользователя",
							"pm.test(\"Each user has correct structure\", function () {",
							"    var users = pm.response.json();",
							"    ",
							"    users.forEach(function(user) {",
							"        pm.expect(user).to.have.property('id');",
							"        pm.expect(user).to.have.property('name');",
							"        pm.expect(user).to.have.property('email');",
							"        pm.expect(user).to.have.property('age');",
							"    });",
							"});",
							"",
							"// Проверка пагинации",
							"pm.test(\"Pagination works correctly\", function () {",
							"    var users = pm.response.json();",
							"    pm.expect(users.length).to.be.at.most(100); // default limit",
							"});",
							"",
							"// Проверка заголовков",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"});",
							"",
							"",
							"//-------------------------------------------------",
							"",
							"// Для некорректного email",
							"pm.test(\"Invalid email returns 422\", function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							"pm.test(\"Validation error structure\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('detail');",
							"    pm.expect(jsonData).to.have.property('error_type', 'validation_error');",
							"    pm.expect(jsonData).to.have.property('errors');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/users?skip=0&limit=100",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users"
					],
					"query": [
						{
							"key": "skip",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "100"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "create user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response has correct structure\", function () {",
							"    const response = pm.response.json();",
							"    const request = JSON.parse(pm.variables.get(\"test_data\"));",
							"    ",
							"    pm.expect(response).to.have.keys(['id', 'name', 'email', 'age']);",
							"    pm.expect(response.name).to.eql(request.name);",
							"    pm.expect(response.email).to.eql(request.email);",
							"    pm.expect(response.age).to.eql(request.age);",
							"    pm.expect(response.id).to.be.a('number');",
							"});",
							"",
							"pm.test(\"Headers are correct\", function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"});",
							"",
							"// Сохраняем ID для последующих тестов",
							"if (pm.response.code === 201) {",
							"    pm.collectionVariables.set(\"created_user_id\", pm.response.json().id);",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const testData = {",
							"    name: \"Test User\",",
							"    email: `test_${Date.now()}@example.com`,",
							"    age: 30",
							"};",
							"pm.variables.set(\"test_data\", JSON.stringify(testData));",
							"pm.request.body.raw = JSON.stringify(testData);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": {{name}},\n    \"email\": {{email}},\n    \"age\": 31\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000",
			"type": "string",
			"description": {
				"content": "",
				"type": "text/plain"
			}
		},
		{
			"key": "created_user_id",
			"value": ""
		}
	]
}